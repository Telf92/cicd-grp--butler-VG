pipeline {
    agent { dockerfile true}
    stages {
        stage('Installing Pip requirements')
            steps {
                withEnv(["HOME=${env.WORKSPACE}"]) {
                    sh '/usr/local/bin/python -m pip install --upgrade pip'
                    sh 'pip install -r backend/requirements.txt'
                }
            }
        
        stage('Run Black') {
            steps {
                sh 'black backend/'
            }
        }

        stage('Run Pylint') {
            steps{
                sh 'pylint --fail-under=7 --recursive true --ignore=venv backend'
            }
        }

        stage('Run API tests') {
            steps{
                withEnv(["HOME=${env.WORKSPACE}"]) {
                    sh 'pytest ./jenkins/tests/test_api_request.py'
                }
            }
        }

        /*stage('Build from Dockerfile') {
            steps {
                sh 'docker build -t ping:latest .'
               
                }
        }*/

        /*stage('Docker Container Testing') {
            steps {
                sh 'chmod 766 jenkins/docker-test.sh'
                sh 'pytest --collect-only'
                sh 'jenkins/docker-test.sh'
            }
        }*/

    }
    post {
        success {
            // Actions to take if the pipeline is successful
            echo 'Build successful!'
        }
        failure {
            // Actions to take if the pipeline fails
            echo 'Build failed!'
        }
    }
}
