pipeline {
    agent any
    stages {

        stage('Run Black') {
            steps {
                sh 'black backend/'
            }
        }

        stage('Run Pylint') {
            steps{
                sh 'pylint --fail-under=7 --recursive true --ignore=venv backend'
            }
        }
        
        stage('Build Docker Image'){
            steps{
                script {
                    // Build your Docker image
                    docker.build('ping-url')
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script{

                    def container = docker.image('ping-url').inside('-p 5000:5000'){
                        try {
                            sh 'echo "Waiting for the server to start..."'

                            // Poll the server until it responds successfully
                            def maxRetries = 10
                            def retryInterval = 3
                            //def containerIpAddress = sh(script: 'docker inspect --format \'{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}\' ping-url', returnStdout: true).trim()
                            def containerIpAddress = sh(script: 'docker inspect -f \'{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}\' ping-url', returnStdout: true).trim()
                            for (int i = 0; i < maxRetries; i++) {
                                // Use the container's IP address in the curl command
                                def responseCode = sh(script: "curl -s -o /dev/null -w \"%{http_code}\" http://${containerIpAddress}:5000", returnStatus: true)

                                if (responseCode == 200) {
                                    echo 'Server is ready!'
                                    break
                                }

                                echo "Server not ready, retrying in ${retryInterval} seconds..."
                                sleep retryInterval
                            }

                            // If the server is still not ready, you might want to handle this case or exit the pipeline
                            if (responseCode != 200) {
                                error 'Server did not become ready within the specified time.'
                            }

                        
                            sh 'pytest ./backend/tests/test_api_request.py'
                        }
                        finally {
                            // Clean up the container
                            container.stop()
                        }
                    }   
                }
            }
        }

        /*stage('Run API tests') {
            steps{
                withEnv(["HOME=${env.WORKSPACE}"]) {
                    sh 'pytest backend/tests/test_api_request.py'
                }
            }
        }*/

    }
    post {
        success {
            // Actions to take if the pipeline is successful
            echo 'Build successful!'
        }
        failure {
            // Actions to take if the pipeline fails
            echo 'Build failed!'
        }
    }
}
