pipeline {
    agent any
    stages {

        stage('Run Black') {
            steps {
                sh 'black backend/'
            }
        }

        stage('Run Pylint') {
            steps{
                sh 'pylint --fail-under=7 --recursive true --ignore=venv backend'
            }
        }
        
        stage('Build Docker Image'){
            steps{
                script {
                    // Build your Docker image
                    docker.build('ping-url')
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script{
                    // Start the Docker container and save its ID
                    def containerId = docker.image('ping-url').run('-p 5000:5000 -d').id
                    echo "Docker container started with ID: ${containerId}"
                    // Set the container ID as an environment variable for later stages
                    env.CONTAINER_ID = containerId
                }
            }
        }


        stage('Run Tests') {
            steps {
                //script {
                    // Run stages inside the Docker container
                    //docker.image('ping-url').inside("${env.CONTAINER_ID}") {
                        //sh '/usr/local/bin/python -m pip install --upgrade pip'
                        //sh 'pip install -r backend/requirements.txt'
                        sh 'pytest backend/tests/test_api_request.py'
                    //}
                }
        }

        stage('Stop Docker Container') {
            steps {
                script {
                    // Stop and remove the Docker container at the end of the pipeline
                    sh "docker stop ${env.CONTAINER_ID}"
                    sh "docker rm ${env.CONTAINER_ID}"
                }
            }
        }

        /*stage('Run API tests') {
            steps{
                sh 'pytest backend/tests/test_api_request.py'
            }
        }*/

    }
    post {
        success {
            // Actions to take if the pipeline is successful
            echo 'Build successful!'
        }
        failure {
            // Actions to take if the pipeline fails
            echo 'Build failed!'
        }
    }
}
